import os
import cohere
import speech_recognition as sr
import pyttsx3
import time

# WARNING: Replace with your actual Cohere API key
# For security, consider using environment variables as a best practice.
cohere_api_key = "5VxilEqsCBq9ZfpeYOP5lN37r9t5F3z3KoP26u0h"

# Initialize the Cohere client with your API key
co = cohere.Client(cohere_api_key)

# Initialize the speech recognizer and text-to-speech engine
recognizer = sr.Recognizer()
engine = pyttsx3.init()

# List available voices
voices = engine.getProperty('voices')

# Print available voices and choose a suitable one
print("Available Voices:")
for index, voice in enumerate(voices):
    print(f"Voice {index}: {voice.name} - ID: {voice.id}")

# Set the voice to a higher-pitched one (adjust the index based on your system)
# A good practice is to find a voice that works on your system and use its ID
# For example, to use a voice named 'english', you might use:
# engine.setProperty('voice', 'english')
# Or, if you know the index, for example, 1, you can use:
try:
    # Attempt to set a specific voice by index. Adjust this number.
    baby_voice_index = 1
    engine.setProperty('voice', voices[baby_voice_index].id)
except IndexError:
    print("Warning: Could not set the specified voice index. Using the default voice.")
    pass # Fall back to the default voice if the index is out of range

# Set speech rate to a higher value for a more playful sound
speech_rate = 180  # Adjust as needed for faster speech
engine.setProperty('rate', speech_rate)

def speak(text):
    """Speaks the text and prints it to the console."""
    print(f"Chatbot: {text}")
    engine.say(text)
    engine.runAndWait()

def chatbot_response(prompt):
    """Generates a response using the Cohere API."""
    try:
        response = co.generate(
            model='command-xlarge-nightly',
            prompt=prompt,
            max_tokens=100,
            temperature=0.7,
            stop_sequences=["\n"]
        )
        return response.generations[0].text.strip()
    except Exception as e:
        return f"Error generating response: {e}"

def listen():
    """Listens for audio input from the microphone."""
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        try:
            audio = recognizer.listen(source, timeout=5)
            print("Finished listening, processing audio...")
            return audio
        except sr.WaitTimeoutError:
            print("Listening timed out while waiting for phrase to start.")
            return None
        except Exception as e:
            print(f"Error during listening: {e}")
            return None

# Simple Chatbot Loop
introduction = "My name is Sam! I am a brilliant, sophisticated, AI-assistant chatbot trained to assist human users by providing thorough responses. I am powered by Command, a large language model built by the company Cohere. Is there anything I can help you with today?"

print("Chatbot: Hello! Please say 'hello sam' to start a conversation.")
speak("Hello! Please say 'hello sam' to start a conversation.")
activated = False  # Flag to check if the chatbot is activated

while True:
    audio = listen()
    if audio is not None:
        try:
            user_input = recognizer.recognize_google(audio)
            print(f"You: {user_input}")

            # Check if the activation phrase is said
            if "hello sam" in user_input.lower():
                if not activated:
                    activated = True
                    speak("Chatbot activated. " + introduction)
                else:
                    speak("I'm already active. How can I assist you?")
            elif activated:
                # Generate a response from the chatbot only if activated
                response = chatbot_response(user_input)
                speak(response)
            else:
                speak("I'm not activated. Please say 'hello sam' to begin.")
                
        except sr.UnknownValueError:
            print("Sorry, I could not understand the audio.")
            speak("Sorry, I could not understand the audio.")
        except sr.RequestError as e:
            print(f"Could not request results from Google Speech Recognition service; {e}")
            speak("Could not connect to the speech recognition service.")
            
    time.sleep(1) # Optional: wait before the next listening cycle